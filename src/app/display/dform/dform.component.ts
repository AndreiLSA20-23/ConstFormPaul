import {
  Component,
  Input,
  OnInit,
  Inject,
  Optional,
  PLATFORM_ID,
  ChangeDetectorRef,
  OnDestroy
} from '@angular/core';
import {
  isPlatformBrowser,
  NgIf,
  NgForOf,
  NgClass,
  NgStyle,
  NgTemplateOutlet
} from '@angular/common';
import { BaseComponent } from '../../base/base/base.component';
import {
  DinFormJsonWorkerService,
  ElementData
} from '../../services/din-form-json-worker.service';
import { FormDataService } from '../../services/formdata.service';
import { HttpClient } from '@angular/common/http';
import {
  ReactiveFormsModule,
  FormGroup,
  FormArray,
  FormsModule,
  FormBuilder,
  AbstractControl,
  FormControl
} from '@angular/forms';
import { CpipSummaryPipe } from './cpip-summary.pipe';
import { SinglePageComponent } from './single-page/single-page.component';
import { PagenPageComponent } from './pagen-page/pagen-page.component';
import { ToastrService } from 'ngx-toastr';
import { Subscription } from 'rxjs';

@Component({
  selector: 'app-dform',
  templateUrl: './dform.component.html',
  styleUrls: ['./dform.component.scss'],
  standalone: true,
  imports: [
    ReactiveFormsModule,
    FormsModule,
    NgIf,
    NgForOf,
    NgClass,
    NgStyle,
    NgTemplateOutlet,
    PagenPageComponent,
    SinglePageComponent,
    CpipSummaryPipe
  ]
})
export class DformComponent extends BaseComponent implements OnInit, OnDestroy {
  @Input() override componentName!: string;

  public ssn: string = '';
  public bday: string = '';
  public maxItems: number = 15;
  public isEditing: boolean = false;
  public selectedIndex: number | null = null;
  public isSurveySaved: boolean = false;
  public isSingleFormView: boolean = true;

  public editForm!: FormGroup; // –§–æ—Ä–º–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞ (FormArray)
  private editFormBackup: any = null;
  private editFormSubscription: Subscription | null = null;
  private fallbackTimer: any;

  // –ó–∞—â–∏—Ç–∞ –æ—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏, –µ—Å–ª–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –º–æ–Ω—Ç–∏—Ä—É–µ—Ç—Å—è –∑–∞–Ω–æ–≤–æ
  private isInitialized = false;
  isReady = false;

  constructor(
    @Inject(DinFormJsonWorkerService) dinFormService: DinFormJsonWorkerService,
    cd: ChangeDetectorRef,
    private formDataService: FormDataService,
    private http: HttpClient,
    private fb: FormBuilder,
    private toastr: ToastrService,
    @Optional() @Inject('ssn') ssnToken: string,
    @Optional() @Inject('bday') bdayToken: string,
    @Inject(PLATFORM_ID) private platformId: Object
  ) {
    super(dinFormService, cd);

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ssn/bday (–µ—Å–ª–∏ –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ)
    if (isPlatformBrowser(this.platformId)) {
      this.ssn = ssnToken || localStorage.getItem('currentUserSSN') || '';
      this.bday = bdayToken || localStorage.getItem('currentUserBday') || '';
    } else {
      this.ssn = ssnToken || '';
      this.bday = bdayToken || '';
    }

    // –ü—É—Å—Ç–∞—è —Ñ–æ—Ä–º–∞ (–¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ FormArray)
    this.editForm = this.fb.group({});
  }

  override ngOnInit(): void {
    if (!this.componentName) {
      console.error('[DformComponent] Component name is not provided.');
      return;
    }

    // –ï—Å–ª–∏ —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–ª–∏ —ç—Ç–æ—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç (–ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–º —Å–æ–∑–¥–∞–Ω–∏–∏), –Ω–µ –ø–æ–≤—Ç–æ—Ä—è–µ–º
    if (this.isInitialized) {
      return;
    }
    this.isInitialized = true;

    // 1) –ó–∞–≥—Ä—É–∂–∞–µ–º JSON-—Å—Ö–µ–º—É (BaseComponent –ø–æ–¥—Ç—è–Ω–µ—Ç –∏ —Å–æ–∑–¥–∞—Å—Ç this.form)
    this.loadRequirements();

    // 2) –ü–æ–¥–≥—Ä—É–∂–∞–µ–º –ø—Ä–µ—Ñ–∏–ª–ª –¥–∞–Ω–Ω—ã—Ö ‚Äî —Å–ª–µ–≥–∫–∞ –æ—Ç–∫–ª–∞–¥—ã–≤–∞–µ–º, —á—Ç–æ–±—ã —Ñ–æ—Ä–º–∞ —É—Å–ø–µ–ª–∞ —Å–æ–∑–¥–∞—Ç—å—Å—è
    setTimeout(() => {
      this.loadPrefillData();
    }, 0);
  }



private loadPrefillData(): void {
  if (!this.ssn) {
    console.error('[DformComponent] Prefill: SSN not found.');
    return;
  }

  const url = `http://localhost:8000/api/form-data/${this.componentName}/${this.ssn}`;
  //console.log('[DformComponent] Loading prefill data from:', url);

  // 1. –°—Ç–∞–≤–∏–º —Ç–∞–π–º–µ—Ä –Ω–∞ 10—Å. –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç–∞ –Ω–µ –±—É–¥–µ—Ç, –ø–æ–∫–∞–∂–µ–º –ø—É—Å—Ç—É—é —Ñ–æ—Ä–º—É
  this.fallbackTimer = setTimeout(() => {
    console.warn('[DformComponent] Prefill request timed out ‚Äî showing blank form.');
    // (–Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ) –û—á–∏—â–∞–µ–º/—Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É:
    if (this.form instanceof FormGroup) {
      // this.form.reset();
      // –ò–ª–∏ –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
    } else if (this.form instanceof FormArray) {
      // while (this.form.length > 0) {
      //   this.form.removeAt(0);
      // }
    }
    this.isReady = true;  // –†–∞–∑—Ä–µ—à–∞–µ–º —Ä–µ–Ω–¥–µ—Ä
    this.cd.detectChanges();
  }, 10000); // 10000 –º—Å = 10 —Å–µ–∫. –ú–æ–∂–Ω–æ 5000 (5 —Å–µ–∫), –∫–∞–∫ –ø–æ–∂–µ–ª–∞–µ—Ç–µ.

  this.http.get(url).subscribe({
    next: (response: any) => {
      // –†–∞–∑ –ø—Ä–∏—à—ë–ª –æ—Ç–≤–µ—Ç ‚Äî —Å–Ω–∏–º–∞–µ–º —Ç–∞–π–º–µ—Ä
      clearTimeout(this.fallbackTimer);

      // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤–æ–æ–±—â–µ —á—Ç–æ-—Ç–æ –≤ response.data
      if (!response || !response.data) {
        console.log('[DformComponent] Empty prefill => —Å—á–∏—Ç–∞–µ–º –Ω–æ–≤—É—é –∞–Ω–∫–µ—Ç—É');
        // –ú–æ–∂–Ω–æ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ "–æ—á–∏—Å—Ç–∏—Ç—å" –∏–ª–∏ –æ—Å—Ç–∞–≤–∏—Ç—å —Ñ–æ—Ä–º—É –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
        // if (this.form instanceof FormGroup) {
        //   this.form.reset();
        // }
        // if (this.form instanceof FormArray) {
        //   // –û—á–∏—â–∞–µ–º –º–∞—Å—Å–∏–≤
        //   while (this.form.length > 0) {
        //     this.form.removeAt(0);
        //   }
        // }
        // –î–∞–ª–µ–µ —Å—Ç–∞–≤–∏–º —Ñ–ª–∞–≥–∏, —á—Ç–æ —É –Ω–∞—Å –Ω–æ–≤–∞—è/–ø—É—Å—Ç–∞—è
        this.cd.detectChanges();
        this.isReady = true;
        return;
      }

      // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ –ø—É—Å—Ç—ã–µ ‚Äî –∏–¥—ë–º –ø–æ –≤–∞—à–µ–π –ª–æ–≥–∏–∫–µ
      // --------------------------------------------------
      if (this.form instanceof FormGroup) {
        //console.log('[DformComponent] Single form - patching data...');

        // -- –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç—Ä–æ–ª "state", –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç --
        if (!this.form.contains('state')) {
          this.form.addControl('state', new FormControl(''));
        }

        // –ü–∞—Ç—á–∏–º –¥–∞–Ω–Ω—ã–µ
        this.form.patchValue(response.data);

        // –ñ–¥—ë–º, –ø–æ–∫–∞ Angular –ø—Ä–∏–º–µ–Ω–∏—Ç –∑–Ω–∞—á–µ–Ω–∏—è –≤ –∫–æ–Ω—Ç—Ä–æ–ª–∞—Ö
        setTimeout(() => {
          const country = this.form.get('country')?.value;
          const stVal = this.form.get('state')?.value;
          //console.log('[DformComponent] After patchValue ‚Äî country:', country, 'state:', stVal);

          this.cd.detectChanges(); // ‚è≥ –¥–æ–∂–∏–º–∞–µ–º —Ä–µ–Ω–¥–µ—Ä

          // –ó–∞–ø—É—Å–∫–∞–µ–º –ª–æ–≥–∏–∫—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ state
          setTimeout(() => {
            //console.log('[DformComponent] üåç Initializing country/state logic...');
            this.initializeCountryAndState(); // –∑–¥–µ—Å—å –¥–æ–±–∞–≤–∏—Ç—Å—è –∫–æ–Ω—Ç—Ä–æ–ª state (–µ—Å–ª–∏ —Å—Ç—Ä–∞–Ω–∞ —Ç—Ä–µ–±—É–µ—Ç)

            // –ü—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ –∫–æ–Ω—Ç—Ä–æ–ª –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω
            setTimeout(() => {
              const stateControl = this.form.get('state');
              //console.log('[DformComponent] ‚úÖ Final state control:', stateControl);
              if (stateControl) {
                //console.log('[DformComponent] üü¢ Final state value:', stateControl.value);
              } else {
                //console.warn('[DformComponent] ‚ö†Ô∏è State control is STILL missing');
              }
              this.cd.detectChanges();
            }, 0);
          }, 0);
        }, 0);
      }

      else if (this.form instanceof FormArray) {
        //console.log('[DformComponent] FormArray - applying prefill items...');
        const arrayData = response.data.items;

        if (Array.isArray(arrayData) && arrayData.length > 0) {
          // –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–∏–π FormArray
          while ((this.form as FormArray).length > 0) {
            (this.form as FormArray).removeAt(0);
          }
          // –î–ª—è –∫–∞–∂–¥–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –¥–µ–ª–∞–µ–º singleFormGroup –∏ –ø—É—à–∏–º
          arrayData.forEach((item: any, i: number) => {
            const newFg = this.dinFormService.generateSingleFormGroup(this.processedData, {
              skipDefaults: false,
              initialValues: item
            });
            (this.form as FormArray).push(newFg);
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω—ã/—à—Ç–∞—Ç–∞
            this.initializeCountryAndState(i);
          });
          this.cd.detectChanges();
          this.isSingleFormView = false;
          this.isSurveySaved = true;
          //console.log('[DformComponent] FormArray: items loaded, manager view enabled.');
        } else {
          // –ü—É—Å—Ç–æ => –æ—Å—Ç–∞—ë–º—Å—è –≤ single form view
          //console.log('[DformComponent] FormArray: no items found, single form view remains.');
        }
      }
      // --------------------------------------------------

      this.cd.detectChanges();
      this.isReady = true;

    },
    error: (error: any) => {
      //console.error('[DformComponent] Prefill error:', error);
      clearTimeout(this.fallbackTimer);
      // this.toastr.error('Failed to load prefill data.');
      // –°—á–∏—Ç–∞–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç => –Ω–æ–≤–∞—è —Ñ–æ—Ä–º–∞ / –∏–ª–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ-—Ç–æ
      this.isReady = true;
      this.cd.detectChanges();
    }
  });
}


  // ----------------------------------------------------------------------------
  // –ú–µ—Ç–æ–¥—ã –¥–ª—è FormArray / —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è/—É–¥–∞–ª–µ–Ω–∏—è, –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
  // ----------------------------------------------------------------------------

  override onYesNoChange(el: ElementData, value: string): void {
    // –ï—Å–ª–∏ —É –Ω–∞—Å FormArray –∏ –≤—ã–±—Ä–∞–Ω —ç–ª–µ–º–µ–Ω—Ç ‚Äì –∏—Å–ø–æ–ª—å–∑—É–µ–º selectedIndex
    const index = (this.form instanceof FormArray && this.selectedIndex !== null)
      ? this.selectedIndex
      : 0;
    super.onYesNoChange(el, value, index);
  }

  onAddNewItem(): void {
    if (!(this.form instanceof FormArray)) {
      console.warn('[DformComponent] onAddNewItem called but form is not a FormArray.');
      return;
    }
    //console.log('[DformComponent] onAddNewItem called. Current length:', this.form.length);

    if (this.form.length < this.maxItems) {
      if (!this.isSurveySaved) {
        this.toastr.warning('Please save the current survey before adding a new one.');
        return;
      }
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π FormGroup –∏–∑ JSON-—Å—Ö–µ–º—ã
      const newGroup = this.dinFormService.generateSingleFormGroup(this.processedData, {
        skipDefaults: false,
        initialValues: {}
      });
      (this.form as FormArray).push(newGroup);

      this.selectedIndex = this.form.length - 1;
      this.isSurveySaved = false;
      this.toastr.success('New survey added successfully.');
      this.cd.detectChanges();
    } else {
      this.toastr.warning('Maximum number of surveys reached.');
    }
  }

  onEditItem(index: number): void {
    //console.log('[DformComponent] onEditItem called with index:', index);
    this.selectedIndex = index;
    this.isEditing = true;

    if (!(this.form instanceof FormArray)) {
      console.warn('[DformComponent] onEditItem called but form is not a FormArray.');
      return;
    }
    const formArray = this.form as FormArray;
    const currentGroup = formArray.at(index) as FormGroup;

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—É—é –≥—Ä—É–ø–ø—É —Å —É—á—ë—Ç–æ–º –≤–æ–∑–º–æ–∂–Ω—ã—Ö –ø–æ–ª–µ–π
    const regenerated = this.dinFormService.generateSingleFormGroup(this.processedData, {
      skipDefaults: false,
      initialValues: currentGroup.value
    });

    // –ó–∞–º–µ–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π —ç–ª–µ–º–µ–Ω—Ç
    formArray.setControl(index, regenerated);

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –±—ç–∫–∞–ø –Ω–∞ —Å–ª—É—á–∞–π Cancel
    this.editFormBackup = JSON.parse(JSON.stringify(currentGroup.value));
    this.editForm = regenerated;

    // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è
    this.editFormSubscription?.unsubscribe();
    this.editFormSubscription = this.editForm.valueChanges.subscribe((newVal: any) => {
      console.warn('[DformComponent] Edit form changes - Index:', index, ', New value:', newVal);
    });

    this.cd.detectChanges();
  }

  onDeleteItem(index: number): void {
  // ‚Ä¶–≤–∞—à–∞ —Ç–µ–∫—É—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–¥–µ–∫—Å–æ–≤‚Ä¶
  const formArray = this.form as FormArray;
  formArray.removeAt(index);

  // —Å—Ä–∞–∑—É —Å–±—Ä–∞—Å—ã–≤–∞–µ–º selectedIndex –∏ –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ä–µ–∂–∏–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  this.exitEditing();

  // —Å–æ–±–∏—Ä–∞–µ–º payload
  const payload = {
    ssn: this.ssn,
    bday: this.bday,
    items: formArray.value
  };

  // –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä
  this.formDataService.createFormData(this.componentName, payload).subscribe({
    next: () => {
      this.toastr.success('Survey deleted successfully.');
      this.isSurveySaved = true;
      this.cd.detectChanges();
    },
    error: err => {
      console.error('[DformComponent] delete persistence error', err);
      this.toastr.error('Failed to persist deletion.');
    }
  });
}


  onEditSubmit(): void {
    //console.log('[DformComponent] onEditSubmit(), selectedIndex:', this.selectedIndex);
    if (this.selectedIndex === null || this.editForm.invalid) {
      this.toastr.error('Form is invalid or no survey selected.');
      return;
    }

    const formArray = this.form as FormArray;
    const targetGroup = formArray.at(this.selectedIndex) as FormGroup;

    targetGroup.patchValue(this.editForm.value);
    this.editForm.markAsPristine();
    this.editFormBackup = null;
    this.exitEditing();
    this.cd.detectChanges();

    const payload = {
      ssn: this.ssn,
      bday: this.bday,
      items: formArray.value // –≤—Å—è –∫–æ–ª–ª–µ–∫—Ü–∏—è
    };
    this.formDataService.createFormData(this.componentName, payload).subscribe({
      next: () => {
        this.toastr.success('Survey updated successfully.');
        this.isSurveySaved = true;
      },
      error: (error: any) => {
        console.error('[DformComponent] onEditSubmit error:', error);
        this.toastr.error('Failed to update survey.');
      }
    });
  }

  override onCancel(): void {
    if (!this.isSurveySaved && this.editForm.dirty && this.editFormBackup) {
      const confirmCancel = confirm('Discard changes?');
      if (confirmCancel) {
        this.editForm.patchValue(this.editFormBackup);
      }
    }
    this.exitEditing();
  }

  private exitEditing(): void {
    this.isEditing = false;
    this.selectedIndex = null;
    this.editFormSubscription?.unsubscribe();
    this.cd.detectChanges();
  }

  override onSubmitFormArray(): void {
    if (this.form.invalid) {
      this.markFormGroupTouched(this.form);
      this.toastr.error('Please fill all required fields.');
      return;
    }
    const formArray = this.form as FormArray;
    const payload = {
      ssn: this.ssn,
      bday: this.bday,
      items: formArray.value
    };
    this.formDataService.createFormData(this.componentName, payload).subscribe({
      next: () => {
        this.toastr.success('Form submitted successfully.');
        this.isSurveySaved = true;
      },
      error: (error: any) => {
        console.error('[DformComponent] onSubmitFormArray error:', error);
        this.toastr.error('Failed to submit form.');
      }
    });
  }

  override onSubmitSingleForm(): void {
  const group = this.getFormGroup() as FormGroup;
  if (!group || group.invalid) {
    this.markFormGroupTouched(group);
    this.toastr.error('Please fill all required fields.');
    return;
  }

  // ‚ë† –æ—á–∏—â–∞–µ–º payload –æ—Ç –ø—É—Å—Ç—ã—Ö/—Å–∏—Ä–æ—Ç—Å–∫–∏—Ö –ø–æ–ª–µ–π
  let payloadCore = this.preparePayload(group.value);
  payloadCore = this.removeOrphanControlsFromPayload(group, payloadCore);

  // ‚ë° –µ—Å–ª–∏ –ø–æ–ª–µ state –∏—Å—á–µ–∑–ª–æ (—Å—Ç—Ä–∞–Ω–∞ –±–µ–∑ —à—Ç–∞—Ç–æ–≤) ‚Äì –¥–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É
  if (!('state' in payloadCore)) {
    payloadCore.state = '';
  }

  const payload = {
    ssn: this.ssn,
    bday: this.bday,
    ...payloadCore
  };

  this.formDataService.createFormData(this.componentName, payload).subscribe({
    next: () => {
      this.toastr.success('Form submitted successfully.');
      this.isSurveySaved = true;
    },
    error: err => {
      console.error('[DformComponent] onSubmitSingleForm error:', err);
      this.toastr.error('Failed to submit form.');
    }
  });
}


  private markFormGroupTouched(formGroup: FormGroup | FormArray): void {
    Object.values(formGroup.controls).forEach((control: AbstractControl) => {
      control.markAsTouched();
      if (control instanceof FormGroup || control instanceof FormArray) {
        this.markFormGroupTouched(control);
      }
    });
  }

  ngOnDestroy(): void {
    this.editFormSubscription?.unsubscribe();
  }

  public getFormForIndex(i: number): FormGroup {
    if (this.form instanceof FormArray) {
      return this.form.at(i) as FormGroup;
    }
    return this.mainFormGroup;
  }

  public getActiveFormGroup(): FormGroup {
    if (this.form instanceof FormArray) {
      const idx = this.selectedIndex !== null ? this.selectedIndex : 0;
      return this.form.at(idx) as FormGroup;
    }
    return this.mainFormGroup;
  }
}

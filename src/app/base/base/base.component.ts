import { Directive, OnInit, ChangeDetectorRef } from '@angular/core';
import { Subject } from 'rxjs'; 
import {
  FormGroup,
  FormControl,
  Validators,
  FormArray,
  AbstractControl
} from '@angular/forms';
import {
  DinFormJsonWorkerService,
  RequirementsData,
  FormComponentData,
  ElementData
} from '../../services/din-form-json-worker.service';

@Directive()
export abstract class BaseComponent implements OnInit {


  protected requirementsReady$ = new Subject<void>();
  // –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –∏–∑ JSON
  processedData!: FormComponentData;

  // –§–æ—Ä–º–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –ª–∏–±–æ FormGroup (–º–æ–Ω–æ—Ä–µ–∂–∏–º), –ª–∏–±–æ FormArray (–ø–æ–ª–∏—Ñ–æ—Ä–º–∞)
  form!: FormGroup | FormArray;

  // –§–ª–∞–≥–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
  isLoading = true;
  errorMessage = '';

  // –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è yes/no —ç–ª–µ–º–µ–Ω—Ç–æ–≤ (–∫–ª—é—á ‚Äì –∏–º—è –∫–æ–Ω—Ç—Ä–æ–ª–∞)
  yesNoStates: { [key: string]: string } = {};

  // –î–ª—è —Ä–∞–±–æ—Ç—ã —Å dropdown —Å—Ç—Ä–∞–Ω—ã ‚Äì –∑–∞–ø–æ–º–∏–Ω–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ –∏–Ω–¥–µ–∫—Å—É
  private lastLoggedCountry: { [key: number]: string } = {};

  // –ü–∞–≥–∏–Ω–∞—Ü–∏—è: —Ç–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∏ —Å–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü
  currentPage: string = 'pagen_0';
  pageKeys: string[] = [];

  /**
   * –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞, —á—Ç–æ–±—ã dinFormService –∑–Ω–∞–ª, –∫–∞–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –≥—Ä—É–∑–∏—Ç—å –∏–∑ JSON.
   * –†–µ–∞–ª–∏–∑—É–µ—Ç—Å—è –≤ –Ω–∞—Å–ª–µ–¥–Ω–∏–∫–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, componentName = 'app-driver-training').
   */
  protected abstract componentName: string;

  constructor(
    protected dinFormService: DinFormJsonWorkerService,
    protected cd: ChangeDetectorRef
  ) {}

  ngOnInit(): void {
    this.loadRequirements();
  }

  /**
   * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç FormGroup –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞ –≤ FormArray –ª–∏–±–æ —Å–∞–º FormGroup (–µ—Å–ª–∏ –æ–Ω –æ–¥–∏–Ω).
   */
  protected getFormGroupAt(index: number): FormGroup | null {
    if (this.form instanceof FormGroup) {
      return this.form;
    } else if (this.form instanceof FormArray) {
      if (this.form.length > index) {
        return this.form.at(index) as FormGroup;
      } else {
        console.error(
          `[BaseComponent] FormArray index ${index} is out of bounds. Length: ${this.form.length}`
        );
      }
    }
    return null;
  }

  /**
   * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç FormGroup. –ï—Å–ª–∏ —Ñ–æ—Ä–º–∞ ‚Äî —ç—Ç–æ –º–∞—Å—Å–∏–≤, –±–µ—Ä—ë—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç (–µ—Å–ª–∏ –∑–∞–¥–∞–Ω) –∏–ª–∏ –ø–µ—Ä–≤—ã–π.
   */
  protected getFormGroup(): FormGroup | null {
    if (this.form instanceof FormGroup) {
      return this.form;
    } else if (this.form instanceof FormArray && this.form.length > 0) {
      const selectedIndex = (this as any).selectedIndex;
      if (
        selectedIndex !== undefined &&
        selectedIndex !== null &&
        this.form.length > selectedIndex
      ) {
        return this.form.at(selectedIndex) as FormGroup;
      }
      return this.form.at(0) as FormGroup;
    }
    return null;
  }

  /**
   * –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ —É–¥–∞–ª—è–µ—Ç –∏–∑ –æ–±—ä–µ–∫—Ç–∞ –ø–æ–ª—è —Å–æ –∑–Ω–∞—á–µ–Ω–∏–µ–º –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–∏, null –∏–ª–∏ undefined.
   */
  protected pruneEmptyFields(obj: any): any {
    if (Array.isArray(obj)) {
      return obj
        .map(item => this.pruneEmptyFields(item))
        .filter(
          item => item !== undefined && item !== null && item !== ''
        );
    } else if (obj !== null && typeof obj === 'object') {
      const pruned: any = {};
      Object.keys(obj).forEach(key => {
        const value = this.pruneEmptyFields(obj[key]);
        if (value !== '' && value !== null && value !== undefined) {
          pruned[key] = value;
        }
      });
      return pruned;
    }
    return obj;
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è yes/no.
   * –ü—Ä–∏ –≤—ã–±–æ—Ä–µ "yes" –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è –ø–æ–¥—ç–ª–µ–º–µ–Ω—Ç—ã (subElements),
   * –ø—Ä–∏ –≤—ã–±–æ—Ä–µ "no" ‚Äì —É–¥–∞–ª—è—é—Ç—Å—è.
   */
  onYesNoChange(el: ElementData, value: string, index: number = 0): void {
    const controlName = el.formControlName || el.id;
    this.yesNoStates[controlName] = value;
    const formGroup = this.getFormGroupAt(index);
    if (!formGroup) {
      console.error(
        `[BaseComponent] No FormGroup found for index ${index}`
      );
      return;
    }
    formGroup.get(controlName)?.setValue(value, { emitEvent: false });
    if (el.subElements) {
      if (value === 'yes') {
        el.subElements.forEach((subEl: ElementData) => {
          if (subEl.type === 'form' && subEl.formGroup) {
            if (!formGroup.contains(subEl.formGroup)) {
              const nestedForm = this.dinFormService.generateFormFromJson({
                id: subEl.id || 'auto_generated_id',
                type: 'form',
                elements: subEl.elements || []
              }) as FormGroup;
              formGroup.addControl(subEl.formGroup, nestedForm);
              //console.log([BaseComponent] Added nested form control "${subEl.formGroup}" at index ${index}`);
            }
          } else if (subEl.formControlName) {
            if (!formGroup.contains(subEl.formControlName)) {
              formGroup.addControl(
                subEl.formControlName,
                new FormControl('')
              );
              //console.log(
              //  `[BaseComponent] Added control "${subEl.formControlName}" at index ${index}`
              //);
            }
          }
        });
      } else if (value === 'no') {
        el.subElements.forEach((subEl: ElementData) => {
          if (
            subEl.formControlName &&
            formGroup.contains(subEl.formControlName)
          ) {
            formGroup.removeControl(subEl.formControlName);
            //console.log(
            //  `[BaseComponent] Removed control "${subEl.formControlName}" at index ${index}`
            //);
          }
          if (
            subEl.type === 'form' &&
            subEl.formGroup &&
            formGroup.contains(subEl.formGroup)
          ) {
            formGroup.removeControl(subEl.formGroup);
            //console.log(
            //  `[BaseComponent] Removed nested form control "${subEl.formGroup}" at index ${index}`
            //);
          }
        });
      }
    }
    this.cd.detectChanges();
  }

  /**
   * –ó–∞–≥—Ä—É–∂–∞–µ—Ç JSON-–¥–∞–Ω–Ω—ã–µ (requirements.json), –±–µ—Ä—ë—Ç –Ω—É–∂–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –ø–æ –∏–º–µ–Ω–∏, —Å–æ–∑–¥–∞—ë—Ç —Ñ–æ—Ä–º—É.
   * –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ —Å–æ–¥–µ—Ä–∂–∞—Ç pages, —Ç–∞–∫–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ª–æ–≥–∏–∫—É –ø–∞–≥–∏–Ω–∞—Ü–∏–∏.
   */
  protected loadRequirements(): void {
    this.dinFormService.loadRequirements('requirements.json').subscribe({
      next: (data: RequirementsData) => {
        const componentData =
          this.dinFormService.getComponentData(this.componentName);
        if (!componentData) {
          this.errorMessage = `No data found for component "${this.componentName}".`;
          this.isLoading = false;
          console.error(
            `[BaseComponent] No component data found for: ${this.componentName}`
          );
          return;
        }
        const vars = data.variables || {};
        const replaced = this.dinFormService.replaceTextVariablesInObject(
          componentData,
          vars
        );
        this.processedData = replaced as FormComponentData;
        let dataForForm = { ...this.processedData };
        if (this.processedData['pages']) {
          const flatElements =
            this.findArrayInObject(
              'elements',
              this.processedData['pages']
            ) ||
            this.findArrayInObject('rows', this.processedData['pages']);
          if (flatElements) {
            dataForForm = {
              ...this.processedData,
              elements: flatElements
            };
          }
        }
        if (this.processedData['pages']) {
          this.pageKeys = Object.keys(this.processedData['pages']);
          if (this.pageKeys.length > 0) {
            this.currentPage = this.pageKeys[0];
          }
        } else {
          this.pageKeys = [];
          this.currentPage = '';
        }
        this.form = this.dinFormService.generateFormFromJson(dataForForm);
        //console.log('[BaseComponent] Form created:', this.form);
        // –í—ã–≤–æ–¥ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        if (this.form instanceof FormArray) {
          for (let i = 0; i < this.form.length; i++) {
            this.initializeCountryAndState(i);
          }
        }
        this.isLoading = false;
        this.cd.detectChanges();
        this.requirementsReady$.next();
        this.requirementsReady$.complete(); 
      },
      error: (err) => {
        this.errorMessage = 'Failed to load data.';
        this.isLoading = false;
        console.error('[BaseComponent] Error loading requirements:', err);
      }
    });
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–æ–Ω—Ç—Ä–æ–ª—ã "country" –∏ "state" –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞ (–∏–ª–∏ –¥–ª—è –æ–¥–∏–Ω–æ—á–Ω–æ–π —Ñ–æ—Ä–º—ã),
   * —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—è –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ prefill (–µ—Å–ª–∏ –æ–Ω–∏ –∑–∞–¥–∞–Ω—ã) –∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É—è state, –µ—Å–ª–∏ —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ –≤—Ö–æ–¥–∏—Ç –≤ —Å–ø–∏—Å–æ–∫ –æ–ø—Ü–∏–π.
   */
  protected initializeCountryAndState(index: number = 0): void {
  const group = this.getFormGroupAt(index);
  if (!group) return;

  const prefillCountry = group.get('country')?.value;
  const prefillState = group.get('state')?.value;

  //console.log(`[BaseComponent] üß≠ initializeCountryAndState index=${index}`, {
  //  prefillCountry,
  //  prefillState,
  //  groupKeys: Object.keys(group.controls)
  //});

  // –ï—Å–ª–∏ –Ω–µ—Ç —Å—Ç—Ä–∞–Ω—ã, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —à–∞–≥
  if (!prefillCountry) {
    //console.log('[BaseComponent] Country is missing. Skipping state initialization.');
    this.cd.detectChanges();
    return;
  }

  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç—Ä–∞–Ω—É –≤ —Ñ–æ—Ä–º—É
  group.get('country')?.setValue(prefillCountry);
  const hasStates = this.countryDropdownData.stateOptions.hasOwnProperty(prefillCountry);
  //console.log(`[BaseComponent] Country "${prefillCountry}" ${hasStates ? 'HAS' : 'does NOT have'} states`);

  // –ï—Å–ª–∏ –¥–ª—è —Å—Ç—Ä–∞–Ω—ã –µ—Å—Ç—å —à—Ç–∞—Ç—ã, –æ–±–Ω–æ–≤–ª—è–µ–º/–¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö
  if (hasStates) {
    const stateOptions = this.countryDropdownData.stateOptions[prefillCountry];
    //console.log(`[BaseComponent] Available states for "${prefillCountry}":`, stateOptions);

    if (!group.contains('state')) {
      group.addControl('state', new FormControl(prefillState || ''));
      //console.log(`[BaseComponent] ‚ûï Added "state" control with value "${prefillState || ''}"`);
    } else {
      group.get('state')?.setValue(prefillState ?? '');
      //console.log(`[BaseComponent] ‚úèÔ∏è Updated "state" value: ${prefillState}`);
    }
  } else {
    if (group.contains('state')) {
      group.removeControl('state');
      //console.log(`[BaseComponent] ‚ùå Removed "state" control because "${prefillCountry}" has no states`);
    }
  }

  //console.log(`[BaseComponent] üîπ Controls after init:`, Object.keys(group.controls));
  this.cd.detectChanges();
}



  /**
   * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç FormGroup (–∏–ª–∏ –±—Ä–æ—Å–∞–µ—Ç –æ—à–∏–±–∫—É, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å).
   */
  get mainFormGroup(): FormGroup {
    const fg = this.getFormGroup();
    if (!fg) {
      throw new Error('FormGroup is not available.');
    }
    return fg;
  }

  /**
   * –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª–Ω—É—é —Ñ–æ—Ä–º—É –∫–∞–∫ –µ—Å—Ç—å (FormGroup –∏–ª–∏ FormArray).
   */
  get fullForm(): FormGroup | FormArray {
    return this.form;
  }

  /**
   * –£–¥–æ–±–Ω—ã–π –≥–µ—Ç—Ç–µ—Ä, –µ—Å–ª–∏ —Ñ–æ—Ä–º–∞ ‚Äî FormArray.
   */
  get formArray(): FormArray {
    return this.form as FormArray;
  }

  get isFormGroup(): boolean {
    return this.fullForm instanceof FormGroup;
  }

  get isFormArray(): boolean {
    return this.fullForm instanceof FormArray;
  }

  /**
   * –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –≤—ã–≤–æ–¥–∞ —Ç–∏–ø–∞ –∫–æ–Ω—Ç—Ä–æ–ª–∞.
   */
  isFormOrArray(control: FormGroup | FormArray): boolean {
    //console.log('Control type:', control);
    return control instanceof FormGroup;
  }

  /**
   * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Å—Å–∏–≤ FormGroup, –µ—Å–ª–∏ —Ñ–æ—Ä–º–∞ ‚Äî FormArray.
   */
  public get formGroups(): FormGroup[] {
    if (this.form instanceof FormArray) {
      return this.form.controls as FormGroup[];
    }
    return [];
  }

  /**
   * –ü–æ–∏—Å–∫ –º–∞—Å—Å–∏–≤–∞ (key) –≤ –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–º –æ–±—ä–µ–∫—Ç–µ (obj).
   * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ø–æ–∏—Å–∫–∞ 'elements' –∏–ª–∏ 'rows' –ø—Ä–∏ flatten —Å—Ç—Ä–∞–Ω–∏—Ü.
   */
  protected findArrayInObject(key: string, obj: any): any[] | null {
    if (!obj || typeof obj !== 'object') {
      return null;
    }
    if (Array.isArray(obj[key])) {
      return obj[key];
    }
    for (const prop in obj) {
      if (Object.prototype.hasOwnProperty.call(obj, prop)) {
        const found = this.findArrayInObject(key, obj[prop]);
        if (found) {
          return found;
        }
      }
    }
    return null;
  }

  /**
   * –¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–∏ –º–Ω–æ–≥–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω–æ–π –ª–æ–≥–∏–∫–µ).
   */
  get currentPageData(): any {
    if (!this.processedData) {
      return {};
    }
    const pagesData =
      this.processedData['pages'] ||
      this.processedData['app-text-display'];
    if (pagesData && this.pageKeys.length > 0) {
      return pagesData[this.currentPage];
    }
    return this.processedData;
  }

  /**
   * –ü–æ–ª—É—á–∞–µ–º –º–∞—Å—Å–∏–≤ 'rows' –∏–ª–∏ 'elements' –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ —à–∞–±–ª–æ–Ω–∞—Ö).
   */
  getRows(): any[] {
    const data = this.currentPageData;
    if (!data) {
      return [];
    }
    let rows = this.findArrayInObject('rows', data);
    if (rows) {
      return rows;
    }
    rows = this.findArrayInObject('elements', data);
    if (rows) {
      return rows;
    }
    return [];
  }

  getRowsForPage(pageKey: string): any[] {
    const pagesData =
      this.processedData['pages'] ||
      this.processedData['app-text-display'];
    const page = pagesData ? pagesData[pageKey] : null;
    if (!page) {
      return [];
    }
    let rows = this.findArrayInObject('rows', page);
    if (!rows) {
      rows = this.findArrayInObject('elements', page);
    }
    return rows || [];
  }

  /**
   * –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É (–¥–ª—è –º–Ω–æ–≥–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞).
   */
  goPrev(): void {
    const currentIndex = this.pageKeys.indexOf(this.currentPage);
    if (currentIndex > 0) {
      this.currentPage = this.pageKeys[currentIndex - 1];
    }
  }

  /**
   * –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É (–¥–ª—è –º–Ω–æ–≥–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞).
   */
  goNext(): void {
    if (!this.isProcessedPageValid()) {
      return;
    }
    const currentIndex = this.pageKeys.indexOf(this.currentPage);
    if (currentIndex < this.pageKeys.length - 1) {
      this.currentPage = this.pageKeys[currentIndex + 1];
    } else {
      if (this.isFormArray) {
        this.onSubmitFormArray();
      } else {
        this.onSubmitSingleForm();
      }
    }
  }

  /**
   * –ú–µ—Ç–æ–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã –≤ –Ω–∞—Å–ª–µ–¥—É—é—â–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö.
   */
  abstract onCancel(): void;
  abstract onSubmitFormArray(): void;
  abstract onSubmitSingleForm(): void;

  // –ì–µ—Ç—Ç–µ—Ä—ã –¥–ª—è —à–∞–±–ª–æ–Ω–∞
  get processedElements(): any[] {
    return this.getRows();
  }

  get processedPageKeys(): string[] {
    return this.pageKeys;
  }

  get currentProcessedPage(): string {
    return this.currentPage;
  }

  getProcessedRowsForPage(pageKey: string): any[] {
    return this.getRowsForPage(pageKey);
  }

  goProcessedPrev(): void {
    this.goPrev();
  }

  goProcessedNext(): void {
    this.goNext();
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã.
   */
  isProcessedPageValid(): boolean {
    const group = this.getFormGroup();
    if (!group) {
      return false;
    }
    const rows = this.getRows();
    let valid = true;
    rows.forEach(row => {
      if (row.formControlName && group.contains(row.formControlName)) {
        const control = group.get(row.formControlName);
        if (control && control.invalid) {
          valid = false;
        }
      }
    });
    return valid;
  }

  /**
   * –ì–µ—Ç—Ç–µ—Ä –¥–ª—è countryDropdownData ‚Äî —á—Ç–æ–±—ã —à–∞–±–ª–æ–Ω –∏–º–µ–ª –¥–æ—Å—Ç—É–ø.
   */
  get countryDropdownData() {
    return this.dinFormService.getCountryDropdownData();
  }

  /**
   * –ú–µ—Ç–æ–¥—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–ø–∏—Å–∫–∞ —à—Ç–∞—Ç–æ–≤/–ø—Ä–æ–≤–∏–Ω—Ü–∏–π –∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω—ã –≤ —Ñ–æ—Ä–º–µ.
   */
  public getStatesHandler(i: number): () => string[] {
    return () => this.getStatesForSelectedCountry(i);
  }

  public getCountryChangeHandler(
    i: number
  ): (event: Event) => void {
    return (event: Event) => this.onCountryChange(event, i);
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω—ã: —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –∫–æ–Ω—Ç—Ä–æ–ª–∞ "country" –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç/—É–¥–∞–ª—è–µ—Ç –∫–æ–Ω—Ç—Ä–æ–ª "state".
   */
  public onCountryChange = (event: Event, index: number): void => {
    const select = event.target as HTMLSelectElement;
    const selectedCountry = select.value.trim();
    if (this.lastLoggedCountry[index] !== selectedCountry) {
      //console.log(
      //  `[BaseComponent] onCountryChange triggered for index ${index}. Selected country: "${selectedCountry}"`
      //);
      this.lastLoggedCountry[index] = selectedCountry;
    }
    const group = this.getFormGroupAt(index);
    if (!group) {
      //console.error(
      //  `[BaseComponent] No FormGroup available in onCountryChange for index ${index}`
      //);
      return;
    }
    if (group.contains('country')) {
      group.get('country')?.setValue(selectedCountry);
      //console.log(
      //  `[BaseComponent] Set value for "country" control: ${selectedCountry}`
      //);
    } else {
      //console.error(
      //  `[BaseComponent] No "country" control found in group at index ${index}`
      //);
    }
    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç—Ä–æ–ª "state" –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–ª–∏—á–∏—è –æ–ø—Ü–∏–π –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω—ã
    const hasStates =
      this.countryDropdownData.stateOptions.hasOwnProperty(selectedCountry);
    if (hasStates) {
      if (!group.contains('state')) {
        group.addControl(
          'state',
          new FormControl('', Validators.required)
        );
        //console.log(
        //  `[BaseComponent] Added "state" control with required validator for index ${index}`
        //);
      }
      const statesList =
        this.countryDropdownData.stateOptions[selectedCountry];
      const currentState = group.get('state')?.value;
      if (!statesList.includes(currentState)) {
        group.get('state')?.setValue('');
        //console.log(
        //  `[BaseComponent] Reset "state" control value because "${currentState}" is not in the list for "${selectedCountry}"`
        //);
      }
    } else {
      if (group.contains('state')) {
        group.removeControl('state');
        //console.log(
        //  `[BaseComponent] Removed "state" control for index ${index} because no states for "${selectedCountry}"`
        //);
      }
    }
    this.cd.detectChanges();
  };

  /**
   * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —à—Ç–∞—Ç–æ–≤/–ø—Ä–æ–≤–∏–Ω—Ü–∏–π –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω—ã.
   */
  public getStatesForSelectedCountry = (index: number): string[] => {
    const group = this.getFormGroupAt(index);
    if (!group) {
      //console.error(
      //  `[BaseComponent] No FormGroup available in getStatesForSelectedCountry for index ${index}`
      //);
      return [];
    }
    if (!group.contains('country')) {
      //console.error(
      //  `[BaseComponent] No "country" control found in FormGroup at index ${index}`
      //);
      return [];
    }
    let selectedCountry = group.get('country')?.value;
    //console.log(
    //  `[BaseComponent] getStatesForSelectedCountry: group value for index ${index}:`,
    //  group.value
    //);
    if (!selectedCountry) {
      return [];
    }
    selectedCountry = selectedCountry.trim();
    if (this.lastLoggedCountry[index] !== selectedCountry) {
      //console.log(
      //  `[BaseComponent] Selected country (index ${index}):`,
      //  selectedCountry
      //);
      this.lastLoggedCountry[index] = selectedCountry;
    }
    if (
      this.countryDropdownData.stateOptions.hasOwnProperty(
        selectedCountry
      )
    ) {
      const states =
        this.countryDropdownData.stateOptions[selectedCountry];
      //console.log(
      //  `[BaseComponent] Found states for index ${index}:`,
      //  states
      //);
      return states.length ? states : ['No states available'];
    } else {
      //console.log(
      //  `[BaseComponent] No state options for selected country "${selectedCountry}" at index ${index}`
      //);
      return [];
    }
  };

  /**
   * –ü—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ä–º—ã (submit) –º–æ–∂–Ω–æ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –æ—á–∏—Å—Ç–∏—Ç—å payload –æ—Ç –ø—É—Å—Ç—ã—Ö –ø–æ–ª–µ–π,
   * —á—Ç–æ–±—ã –≤ JSON –Ω–µ –∑–∞–ø–∏—Å—ã–≤–∞–ª–∏—Å—å –Ω–µ–Ω—É–∂–Ω—ã–µ –ø—É—Å—Ç—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ.
   */
  protected preparePayload(rawValue: any): any {
    return this.pruneEmptyFields(rawValue);
  }
  protected removeOrphanControlsFromPayload(group: FormGroup, payload: any): any {
  const controlsInForm = Object.keys(group.controls);
  return Object.keys(payload).reduce((acc, key) => {
    if (controlsInForm.includes(key)) {
      acc[key] = payload[key];
    } else {
      console.log(`[BaseComponent] üßπ Removed orphan field from payload: ${key}`);
    }
    return acc;
  }, {} as any);
}
}
